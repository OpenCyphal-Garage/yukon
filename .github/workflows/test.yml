name: Yukon tests
on: push
concurrency:
  group: "CI"
  cancel-in-progress: true
jobs:
  python-quality-check:
    runs-on: ubuntu-22.04
    steps:
      - name: checking out
        uses: actions/checkout@v2
      - name: Installing Python3
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: "pip"
      - name: installing dependencies
        run: |
          sudo apt-get install coreutils # for timeout
          pip install yakut
          yakut compile -O.compiled https://github.com/OpenCyphal/public_regulated_data_types/archive/refs/heads/master.zip
          pip install nox
          pip install -r requirements.txt -r dev-requirements.txt
      - name: Testing GUI
        run: |
          PYTHONPATH="." nox -s mypy
          PYTHONPATH="." nox -s black
          PYTHONPATH="." nox -s pylint
          PYTHONPATH="." nox -s pytest

  build-release-linux:
    name: Yukon Linux Build
    runs-on: ubuntu-20.04
    if: contains(github.event.head_commit.message, '#build-gnu-linux') || github.ref == 'refs/heads/main'
    steps:
      - name: checking out
        uses: actions/checkout@v2
      - name: Installing Python3
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: "pip"
      - uses: actions/setup-node@v3
      - name: installing dependencies
        run: |
          sudo apt install libgfortran5 libquadmath0
          pip install yakut
          yakut compile -O.compiled https://github.com/OpenCyphal/public_regulated_data_types/archive/refs/heads/master.zip
          python3.10 -m venv venv
          source venv/bin/activate
          pip install nox
          pip install -r requirements.txt -r dev-requirements.txt
      - name: Configure SSH
        if: github.ref == 'refs/heads/main'
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/private.key
          chmod 600 ~/.ssh/private.key
          cat >>~/.ssh/config <<END
          Host target
            HostName $SSH_HOST
            User $SSH_USER
            IdentityFile ~/.ssh/private.key
            StrictHostKeyChecking no
          END
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USERNAME }}
          SSH_KEY: ${{ secrets.SSH_KEY }}
      - name: Build the release using the script, which will call pyinstaller
        continue-on-error: false
        run: |
          source venv/bin/activate
          python3.10 build_exe.py
      - name: Wait for tests to succeed
        uses: lewagon/wait-on-check-action@v1.2.0
        with:
          ref: ${{ github.ref }}
          check-name: "python-quality-check"
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 10
      - name: Deploy the release
        if: github.ref == 'refs/heads/main'
        run: |
          YUKON_VERSION_1=$(python3 -c "from yukon.version import __version__; print(__version__)")
          YUKON_VERSION=$(python3 -c "from yukon.version import __version__; print(__version__)")
          YUKON_TARGET_DIR=/var/www/files/products/org.opencyphal.yukon/releases/$YUKON_VERSION/linux-x86_64
          ssh target "mkdir -p $YUKON_TARGET_DIR; echo $YUKON_TARGET_DIR"
          scp $YUKON_ARTIFACT target:$YUKON_TARGET_DIR
        env:
          YUKON_ARTIFACT: dist/Yukon
      - name: Save artifact
        uses: actions/upload-artifact@v2
        if: contains(github.event.head_commit.message, '#build-gnu-linux')
        with:
          name: Yukon-${{github.job}}
          path: dist/Yukon
          retention-days: 7
  build-release-linux2:
    name: Yukon Linux Build
    runs-on: ubuntu-22.04
    if: contains(github.event.head_commit.message, '#build-gnu-linux') || github.ref == 'refs/heads/main'
    steps:
      - name: checking out
        uses: actions/checkout@v2
      - name: Installing Python3
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: "pip"
      - uses: actions/setup-node@v3
      - name: installing dependencies
        run: |
          sudo apt install libgfortran5 libquadmath0
          pip install yakut
          yakut compile -O.compiled https://github.com/OpenCyphal/public_regulated_data_types/archive/refs/heads/master.zip
          python3.10 -m venv venv
          source venv/bin/activate
          pip install nox
          pip install -r requirements.txt -r dev-requirements.txt
      - name: Configure SSH
        if: github.ref == 'refs/heads/main'
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/private.key
          chmod 600 ~/.ssh/private.key
          cat >>~/.ssh/config <<END
          Host target
            HostName $SSH_HOST
            User $SSH_USER
            IdentityFile ~/.ssh/private.key
            StrictHostKeyChecking no
          END
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USERNAME }}
          SSH_KEY: ${{ secrets.SSH_KEY }}
      - name: Build the release using the script, which will call pyinstaller
        continue-on-error: false
        run: |
          source venv/bin/activate
          python3.10 build_exe.py
      - name: Wait for tests to succeed
        uses: lewagon/wait-on-check-action@v1.2.0
        with:
          ref: ${{ github.ref }}
          check-name: "python-quality-check"
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 10
      - name: Deploy the release
        if: github.ref == 'refs/heads/main'
        run: |
          YUKON_VERSION_1=$(python3 -c "from yukon.version import __version__; print(__version__)")
          YUKON_VERSION=$(python3 -c "from yukon.version import __version__; print(__version__)")
          YUKON_TARGET_DIR=/var/www/files/products/org.opencyphal.yukon/releases/$YUKON_VERSION/linux-x86_64_ubuntu-22.04-manjaro
          ssh target "mkdir -p $YUKON_TARGET_DIR; echo $YUKON_TARGET_DIR"
          scp $YUKON_ARTIFACT target:$YUKON_TARGET_DIR
        env:
          YUKON_ARTIFACT: dist/Yukon
      - name: Save artifact
        uses: actions/upload-artifact@v2
        if: contains(github.event.head_commit.message, '#build-gnu-linux')
        with:
          name: Yukon-${{github.job}}-ubuntu-22.04
          path: dist/Yukon
          retention-days: 7
  build-release-windows:
    name: Yukon Windows Build
    runs-on: windows-latest
    if: contains(github.event.head_commit.message, '#build-windows') || github.ref == 'refs/heads/main'
    steps:
      - name: Checkout GitHub repository
        uses: actions/checkout@v3
      - name: Installing Python3
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: "pip"
      - uses: actions/setup-node@v3
      - name: Installing dependencies
        run: |
          python3 -m venv venv
          venv\Scripts\activate.bat
          pip install wheel yakut
          yakut compile -O.compiled https://github.com/OpenCyphal/public_regulated_data_types/archive/refs/heads/master.zip
          pip install nox
          python3 --version
          pip install -r requirements.txt -r dev-requirements.txt
      - name: Testing GUI
        run: |
          venv\Scripts\activate.bat
          $Env:PYTHONPATH = ".:.."
          nox -s mypy
          nox -s black
          nox -s pylint
      - name: Building release
        run: |
          venv\Scripts\activate.bat
          python3 build_exe.py
      - name: Configure OpenSSH parameters
        if: github.ref == 'refs/heads/main'
        uses: LuisEnMarroquin/setup-ssh-action@v2.0.0
        with:
          ORIGIN: ${{ secrets.SSH_HOST }}
          SSHKEY: ${{ secrets.SSH_KEY }}
          NAME: target
          USER: ${{ secrets.SSH_USERNAME }}
      - name: Copy artifact to remote file server
        if: github.ref == 'refs/heads/main'
        run: |
          Add-Content -Path "C:\Users\runneradmin\.ssh\access" -Value "`n" -NoNewLine  # Hack: add newline to end of key on Windows Server 2022
          $YUKON_VERSION = (python3 -c "from yukon.version import __version__; print(__version__)")
          $YUKON_TARGET_DIR = "/var/www/files/products/org.opencyphal.yukon/releases/${YUKON_VERSION}/windows-x86_64"
          ssh target "mkdir -p $YUKON_TARGET_DIR; echo $YUKON_TARGET_DIR"
          scp $Env:YUKON_ARTIFACT target:${YUKON_TARGET_DIR}
        env:
          YUKON_ARTIFACT: ./dist/Yukon.exe
      - name: Save artifact
        uses: actions/upload-artifact@v2
        if: contains(github.event.head_commit.message, '#build-windows')
        with:
          name: workspace-${{github.job}}
          path: ./dist/Yukon.exe
          retention-days: 7
